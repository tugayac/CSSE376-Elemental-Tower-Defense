import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 * TODO Put here a description of what this class does.
 * 
 * @author tugayac. Created Apr 27, 2012.
 */
public class Stopwatch extends JFrame implements ActionListener {

	private JLabel displayTimeLabel;
	private long watchStart;
	private Timer theChronometer;
	private long pausedTime;
	private boolean paused = false;
	private JButton activateTimerButton;

	public static void main(String[] args) {
		Stopwatch s = new Stopwatch();

		s.setVisible(true);
		s.setLocationRelativeTo(null);
	}

	public Stopwatch() {

		super();
		setSize(400, 150);
		setLayout(new GridLayout(2, 1));
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setTitle("Stop Watch");

		// layout a display with a label at the top to display elapsed time
		// and a row of buttons to control the timer

		// define some fonts
		Font largeFontBOLD = new Font("Calibri", Font.BOLD, 20);
		Font largeFontPLAIN = new Font("Calibri", Font.PLAIN, 20);

		JPanel buttonPanel = new JPanel();
		buttonPanel.setLayout(new GridLayout(1, 3));

		this.activateTimerButton = new JButton("Start");// will display resume
														// when
		// the watch is paused
		JButton stopTimerButton = new JButton("Stop");
		JButton pauseTimerButton = new JButton("Pause");

		// register buttons to generate events when clicked
		this.activateTimerButton.addActionListener(this);
		stopTimerButton.addActionListener(this);
		pauseTimerButton.addActionListener(this);

		// the display for elapsed time
		this.displayTimeLabel = new JLabel("Stop Watch Application");
		this.displayTimeLabel.setHorizontalAlignment(JLabel.CENTER);

		// use a large font
		this.displayTimeLabel.setFont(largeFontPLAIN);
		this.activateTimerButton.setFont(largeFontBOLD);
		stopTimerButton.setFont(largeFontBOLD);
		pauseTimerButton.setFont(largeFontBOLD);

		// The JLabel background is transparent by default,
		// so changing the background color doesn't anything.
		// Set to Opaque to make visible
		this.displayTimeLabel.setOpaque(true);

		// The default colors available are often too "loud".
		// For example Color.yellow is very bright but my gold is more subtle.
		// by controling the Red, Blue and Green intensity
		// you can make up to 256 cubed or 16,777,216 custom colors.
		this.displayTimeLabel.setBackground(new Color(255, 204, 51));// gold
		this.displayTimeLabel.setForeground(new Color(153, 0, 0));// burgundy
		stopTimerButton.setBackground(new Color(0, 150, 0));// dark green
		stopTimerButton.setForeground(new Color(255, 204, 51));
		this.activateTimerButton.setBackground(new Color(0, 150, 0));
		this.activateTimerButton.setForeground(new Color(255, 204, 51));
		pauseTimerButton.setBackground(new Color(0, 150, 0));
		pauseTimerButton.setForeground(new Color(255, 204, 51));

		// add the components to the layout
		buttonPanel.add(this.activateTimerButton);
		buttonPanel.add(stopTimerButton);
		buttonPanel.add(pauseTimerButton);
		add(this.displayTimeLabel);
		add(buttonPanel);

		this.theChronometer = new Timer(1000, new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int seconds = (int) (System.currentTimeMillis() - Stopwatch.this.watchStart) / 1000;
				int days = seconds / 86400;
				int hours = (seconds / 3600) - (days * 24);
				int min = (seconds / 60) - (days * 1440) - (hours * 60);
				int sec = seconds % 60;
				String s = new String("" + hours + " hours " + min + " min "
						+ sec + " sec");
				Stopwatch.this.displayTimeLabel.setText(s);
			}
		});
	}

	public void start() {
		this.theChronometer.start();
	}
	
	public void stop() {
		this.theChronometer.stop();
	}
	
	public void actionPerformed(ActionEvent e) {

		if (e.getActionCommand().equals("Stop")) {
			this.theChronometer.stop();
		} else if (e.getActionCommand().equals("Start")
				|| e.getActionCommand().equals("Resume")) {
			if (!this.paused) {
				this.watchStart = System.currentTimeMillis();
				this.theChronometer.start();
			} else {
				this.watchStart = System.currentTimeMillis() + this.pausedTime;
				this.pausedTime = 0;
				this.theChronometer.start();
				this.paused = false;
				this.activateTimerButton.setText("Start");
			}
		} else if (e.getActionCommand().equals("Pause")) {
			long now = System.currentTimeMillis();
			this.pausedTime -= (now - this.watchStart);
			this.theChronometer.stop();
			this.paused = true;
			this.activateTimerButton.setText("Resume");
		}
	}
}