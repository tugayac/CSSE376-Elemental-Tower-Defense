import java.awt.Color;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;

import javax.swing.*;

/**
 * TODO Put here a description of what this class does.
 * 
 * @author tugayac. Created Apr 27, 2012.
 */
public class ControlPanelNew extends JFrame {

	private Player player;
	private Map map;
	private ArrayList<Tower> towers;
	private ArrayList<Enemy> activeEnemies;

	public ControlPanelNew(Map map, Player player) {
		this.player = player;
		this.map = map;
		this.towers = map.getTowers();
		this.activeEnemies = map.getEnemies();

		initComponents();
		// initLabelInfo();

		this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		this.setVisible(true);
	}

	private void initComponents() {
		this.setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();

		this.topLeftPanel = new JPanel();
		this.topLeftPanel
				.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		c.fill = GridBagConstraints.BOTH;
		c.gridx = 0;
		c.gridy = 0;
		this.add(this.topLeftPanel, c);

		this.topCenterPanel = new JPanel();
		this.topCenterPanel.setBorder(BorderFactory
				.createLineBorder(Color.BLACK));
		c.fill = GridBagConstraints.BOTH;
		c.gridx = 1;
		c.gridy = 0;
		this.add(this.topCenterPanel, c);

		this.topRightPanel = new JPanel();
		this.topRightPanel.setBorder(BorderFactory
				.createLineBorder(Color.BLACK));
		c.fill = GridBagConstraints.BOTH;
		c.gridx = 2;
		c.gridy = 0;
		this.add(this.topRightPanel, c);

		this.bottomLeftPanel = new JPanel();
		this.bottomLeftPanel.setBorder(BorderFactory
				.createLineBorder(Color.BLACK));
		c.fill = GridBagConstraints.BOTH;
		c.gridwidth = 2;
		c.gridx = 0;
		c.gridy = 1;
		this.add(this.bottomLeftPanel, c);

		this.bottomRightPanel = new JPanel();
		this.bottomRightPanel.setBorder(BorderFactory
				.createLineBorder(Color.BLACK));
		c.fill = GridBagConstraints.BOTH;
		c.gridwidth = 1;
		c.gridx = 2;
		c.gridy = 1;
		this.add(this.bottomRightPanel, c);

		initImageIcons();

		initTopLeftPanel();
		initTopCenterPanel();
		initTopRightPanel();
		initBottomLeftPanel();
		initBottomRightPanel();

		initLabelInfo();

		pack();
	}

	private void initLabelInfo() {
		/*
		 * Player Information
		 */
		this.playerScoreValueLabel.setText(Integer.toString(this.player
				.getScore()));
		this.playerManaValueLabel.setText(Integer.toString(this.player
				.getMana()));
		this.playerWaveValueLabel.setText(Integer.toString(this.map
				.getWaveNumber()));
		this.playerHealthValueLabel.setText(Integer.toString(this.player
				.getHealth()));

		Stopwatch s = new Stopwatch(this.playerTimeValueLabel);
		s.start();

		/*
		 * Wave Information
		 */
		// Nothing to do

		/*
		 * Selected Enemy Information
		 */
		// Nothing to do

		/*
		 * Available Tower Cost Information
		 */
		this.fireCostValueLabel.setText("0 Mana");
		this.waterCostValueLabel.setText("0 Mana");
		this.airCostValueLabel.setText("0 Mana");
		this.lightCostValueLabel.setText("0 Mana");
		this.earthCostValueLabel.setText("0 Mana");
	}

	private void initImageIcons() {
		/*
		 * Fire button image initialization
		 */
		ImageIcon tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/fire_clicked.png"));
		Image tempImage = tempIcon.getImage();
		this.fireClicked = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);

		tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/fire_unclicked.png"));
		tempImage = tempIcon.getImage();
		this.fireUnclicked = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);

		tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/fire_grey1.png"));
		tempImage = tempIcon.getImage();
		this.fireInsuffMana = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);

		tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/fire_grey.png"));
		tempImage = tempIcon.getImage();
		this.fireNotAvailable = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);

		/*
		 * Water button image initialization
		 */
		tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/water_clicked.png"));
		tempImage = tempIcon.getImage();
		this.waterClicked = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);

		tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/water_unclicked.png"));
		tempImage = tempIcon.getImage();
		this.waterUnclicked = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);

		tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/water_grey1.png"));
		tempImage = tempIcon.getImage();
		this.waterInsuffMana = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);

		tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/water_grey.png"));
		tempImage = tempIcon.getImage();
		this.waterNotAvailable = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);

		/*
		 * Air button image initialization
		 */
		tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/air_clicked.png"));
		tempImage = tempIcon.getImage();
		this.airClicked = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);

		tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/air_unclicked.png"));
		tempImage = tempIcon.getImage();
		this.airUnclicked = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);

		tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/air_grey1.png"));
		tempImage = tempIcon.getImage();
		this.airInsuffMana = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);

		tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/air_grey.png"));
		tempImage = tempIcon.getImage();
		this.airNotAvailable = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);

		/*
		 * Light button image initialization
		 */
		tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/light_clicked.png"));
		tempImage = tempIcon.getImage();
		this.lightClicked = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);

		tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/light_unclicked.png"));
		tempImage = tempIcon.getImage();
		this.lightUnclicked = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);

		tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/light_grey1.png"));
		tempImage = tempIcon.getImage();
		this.lightInsuffMana = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);

		tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/light_grey.png"));
		tempImage = tempIcon.getImage();
		this.lightNotAvailable = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);

		/*
		 * Earth button image initialization
		 */
		tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/earth_clicked.png"));
		tempImage = tempIcon.getImage();
		this.earthClicked = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);

		tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/earth_unclicked.png"));
		tempImage = tempIcon.getImage();
		this.earthUnclicked = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);

		tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/earth_grey1.png"));
		tempImage = tempIcon.getImage();
		this.earthInsuffMana = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);

		tempIcon = new ImageIcon(getClass().getResource(
				"/resources/images/towers/earth_grey.png"));
		tempImage = tempIcon.getImage();
		this.earthNotAvailable = tempImage.getScaledInstance(100, 100,
				Image.SCALE_SMOOTH);
	}

	private void initTopLeftPanel() {
		this.topLeftPanel.setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		// Global for all components
		c.insets = new Insets(5, 10, 10, 10);

		this.playerInfoLabel = new JLabel("Player Information");
		this.playerInfoLabel.setFont(new Font("Tahoma", 0, 18)); // NOI18N
		c.fill = GridBagConstraints.RELATIVE;
		c.gridwidth = 4;
		c.gridx = 0;
		c.gridy = 0;
		this.topLeftPanel.add(this.playerInfoLabel, c);

		this.playerScoreLabel = new JLabel("Score:");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridwidth = 1;
		c.gridx = 0;
		c.gridy = 1;
		this.topLeftPanel.add(this.playerScoreLabel, c);

		this.playerScoreValueLabel = new JLabel("scoreValue");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 1;
		c.gridy = 1;
		this.topLeftPanel.add(this.playerScoreValueLabel, c);

		this.playerManaLabel = new JLabel("Mana:");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 2;
		c.gridy = 1;
		this.topLeftPanel.add(this.playerManaLabel, c);

		this.playerManaValueLabel = new JLabel("manaValue");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 3;
		c.gridy = 1;
		this.topLeftPanel.add(this.playerManaValueLabel, c);

		this.playerWaveLabel = new JLabel("Wave:");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 0;
		c.gridy = 2;
		this.topLeftPanel.add(this.playerWaveLabel, c);

		this.playerWaveValueLabel = new JLabel("waveValue");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 1;
		c.gridy = 2;
		this.topLeftPanel.add(this.playerWaveValueLabel, c);

		this.playerHealthLabel = new JLabel("Health:");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 2;
		c.gridy = 2;
		this.topLeftPanel.add(this.playerHealthLabel, c);

		this.playerHealthValueLabel = new JLabel("healthValue");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 3;
		c.gridy = 2;
		this.topLeftPanel.add(this.playerHealthValueLabel, c);

		this.playerTimeLabel = new JLabel("Time:");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 0;
		c.gridy = 3;
		this.topLeftPanel.add(this.playerTimeLabel, c);

		this.playerTimeValueLabel = new JLabel("timeValue");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 1;
		c.gridy = 3;
		this.topLeftPanel.add(this.playerTimeValueLabel, c);
	}

	private void initTopCenterPanel() {
		this.topCenterPanel.setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		// Global for all components
		c.insets = new Insets(5, 10, 10, 10);

		this.waveInfoLabel = new JLabel("Wave Information");
		this.waveInfoLabel.setFont(new Font("Tahoma", 0, 18)); // NOI18N
		c.fill = GridBagConstraints.RELATIVE;
		c.gridwidth = 4;
		c.gridx = 0;
		c.gridy = 0;
		this.topCenterPanel.add(this.waveInfoLabel, c);

		this.waveLevelLabel = new JLabel("Level:");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridwidth = 1;
		c.gridx = 0;
		c.gridy = 1;
		this.topCenterPanel.add(this.waveLevelLabel, c);

		this.waveLevelValueLabel = new JLabel("levelValue");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 1;
		c.gridy = 1;
		this.topCenterPanel.add(this.waveLevelValueLabel, c);

		this.waveHealthLabel = new JLabel("Health:");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 2;
		c.gridy = 1;
		this.topCenterPanel.add(this.waveHealthLabel, c);

		this.waveHealthValueLabel = new JLabel("healthValue");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 3;
		c.gridy = 1;
		this.topCenterPanel.add(this.waveHealthValueLabel, c);

		this.waveNameLabel = new JLabel("Name:");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 0;
		c.gridy = 2;
		this.topCenterPanel.add(this.waveNameLabel, c);

		this.waveNameValueLabel = new JLabel("nameValue");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 1;
		c.gridy = 2;
		this.topCenterPanel.add(this.waveNameValueLabel, c);

		this.waveArmorLabel = new JLabel("Armor:");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 2;
		c.gridy = 2;
		this.topCenterPanel.add(this.waveArmorLabel, c);

		this.waveArmorValueLabel = new JLabel("armorValue");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 3;
		c.gridy = 2;
		this.topCenterPanel.add(this.waveArmorValueLabel, c);

		this.waveSpeedLabel = new JLabel("Speed:");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 0;
		c.gridy = 3;
		this.topCenterPanel.add(this.waveSpeedLabel, c);

		this.waveSpeedValueLabel = new JLabel("speedValue");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 1;
		c.gridy = 3;
		this.topCenterPanel.add(this.waveSpeedValueLabel, c);
	}

	private void initTopRightPanel() {
		this.topRightPanel.setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		// Global for all components
		c.insets = new Insets(5, 10, 10, 10);

		this.selectedEnemyLabel = new JLabel("Selected Enemy");
		this.selectedEnemyLabel.setFont(new Font("Tahoma", 0, 18)); // NOI18N
		c.fill = GridBagConstraints.RELATIVE;
		c.gridwidth = 2;
		c.gridx = 0;
		c.gridy = 0;
		this.topRightPanel.add(this.selectedEnemyLabel, c);

		this.selectedHealthLabel = new JLabel("Health:");
		c.fill = GridBagConstraints.RELATIVE;
		// Set once
		c.gridwidth = 1;
		c.gridx = 0;
		c.gridy = 1;
		this.topRightPanel.add(this.selectedHealthLabel, c);

		this.selectedHealthValueLabel = new JLabel("healthValue");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 1;
		c.gridy = 1;
		this.topRightPanel.add(this.selectedHealthValueLabel, c);

		this.selectedArmorLabel = new JLabel("Armor:");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 0;
		c.gridy = 2;
		this.topRightPanel.add(this.selectedArmorLabel, c);

		this.selectedArmorValueLabel = new JLabel("armorValue");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 1;
		c.gridy = 2;
		this.topRightPanel.add(this.selectedArmorValueLabel, c);

		this.selectedSpeedLabel = new JLabel("Speed:");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 0;
		c.gridy = 3;
		this.topRightPanel.add(this.selectedSpeedLabel, c);

		this.selectedSpeedValueLabel = new JLabel("speedValue");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 1;
		c.gridy = 3;
		this.topRightPanel.add(this.selectedSpeedValueLabel, c);
	}

	private void initBottomLeftPanel() {
		this.bottomLeftPanel.setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		// Global for all components
		c.insets = new Insets(5, 10, 10, 10);

		this.availableTowersLabel.setFont(new Font("Tahoma", 0, 18)); // NOI18N
		this.availableTowersLabel.setText("Available Towers");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridwidth = 10;
		c.gridx = 0;
		c.gridy = 0;
		this.bottomLeftPanel.add(this.availableTowersLabel, c);

		this.fireButton = new JButton(new ImageIcon(this.fireUnclicked));
		this.fireButton.setBorderPainted(false);
		this.fireButton.setContentAreaFilled(false);
		c.fill = GridBagConstraints.RELATIVE;
		c.gridwidth = 2;
		c.gridx = 0;
		c.gridy = 1;
		this.bottomLeftPanel.add(this.fireButton, c);
		this.fireButton.addMouseListener(new MouseListener() {

			public void mouseReleased(MouseEvent e) {
				ControlPanelNew.this.fireButton.setIcon(new ImageIcon(
						ControlPanelNew.this.fireUnclicked));
			}

			public void mousePressed(MouseEvent e) {
				ControlPanelNew.this.fireButton.setIcon(new ImageIcon(
						ControlPanelNew.this.fireClicked));
			}

			public void mouseExited(MouseEvent e) {
				// Nothing to do
			}

			public void mouseEntered(MouseEvent e) {
				// Nothing to do
			}

			public void mouseClicked(MouseEvent e) {
				// Nothing to do
			}
		});

		this.waterButton = new JButton(new ImageIcon(this.waterUnclicked));
		this.waterButton.setBorderPainted(false);
		this.waterButton.setContentAreaFilled(false);
		c.fill = GridBagConstraints.RELATIVE;
		c.gridwidth = 2;
		c.gridx = 0;
		c.gridy = 2;
		this.bottomLeftPanel.add(this.fireButton, c);
		this.waterButton.addMouseListener(new MouseListener() {

			public void mouseReleased(MouseEvent e) {
				ControlPanelNew.this.waterButton.setIcon(new ImageIcon(
						ControlPanelNew.this.waterUnclicked));
			}

			public void mousePressed(MouseEvent e) {
				ControlPanelNew.this.waterButton.setIcon(new ImageIcon(
						ControlPanelNew.this.waterClicked));
			}

			public void mouseExited(MouseEvent e) {
				// Nothing to do
			}

			public void mouseEntered(MouseEvent e) {
				// Nothing to do
			}

			public void mouseClicked(MouseEvent e) {
				// Nothing to do
			}
		});

		this.airButton = new JButton(new ImageIcon(this.airUnclicked));
		this.airButton.setBorderPainted(false);
		this.airButton.setContentAreaFilled(false);
		this.airButton.addMouseListener(new MouseListener() {

			public void mouseReleased(MouseEvent e) {
				ControlPanelNew.this.airButton.setIcon(new ImageIcon(
						ControlPanelNew.this.airUnclicked));
			}

			public void mousePressed(MouseEvent e) {
				ControlPanelNew.this.airButton.setIcon(new ImageIcon(
						ControlPanelNew.this.airClicked));
			}

			public void mouseExited(MouseEvent e) {
				// Nothing to do
			}

			public void mouseEntered(MouseEvent e) {
				// Nothing to do
			}

			public void mouseClicked(MouseEvent e) {
				// Nothing to do
			}
		});

		this.lightButton = new JButton(new ImageIcon(this.lightUnclicked));
		this.lightButton.setBorderPainted(false);
		this.lightButton.setContentAreaFilled(false);
		this.lightButton.addMouseListener(new MouseListener() {

			public void mouseReleased(MouseEvent e) {
				ControlPanelNew.this.lightButton.setIcon(new ImageIcon(
						ControlPanelNew.this.lightUnclicked));
			}

			public void mousePressed(MouseEvent e) {
				ControlPanelNew.this.lightButton.setIcon(new ImageIcon(
						ControlPanelNew.this.lightClicked));
			}

			public void mouseExited(MouseEvent e) {
				// Nothing to do
			}

			public void mouseEntered(MouseEvent e) {
				// Nothing to do
			}

			public void mouseClicked(MouseEvent e) {
				// Nothing to do
			}
		});

		this.earthButton = new JButton(new ImageIcon(this.earthUnclicked));
		this.earthButton.setBorderPainted(false);
		this.earthButton.setContentAreaFilled(false);
		this.earthButton.addMouseListener(new MouseListener() {

			public void mouseReleased(MouseEvent e) {
				ControlPanelNew.this.earthButton.setIcon(new ImageIcon(
						ControlPanelNew.this.earthUnclicked));
			}

			public void mousePressed(MouseEvent e) {
				ControlPanelNew.this.earthButton.setIcon(new ImageIcon(
						ControlPanelNew.this.earthClicked));
			}

			public void mouseExited(MouseEvent e) {
				// Nothing to do
			}

			public void mouseEntered(MouseEvent e) {
				// Nothing to do
			}

			public void mouseClicked(MouseEvent e) {
				// Nothing to do
			}
		});

		this.fireCostLabel = new JLabel();
		this.fireCostValueLabel = new JLabel();
		this.waterCostLabel = new JLabel();
		this.waterCostValueLabel = new JLabel();
		this.airCostLabel = new JLabel();
		this.airCostValueLabel = new JLabel();
		this.lightCostLabel = new JLabel();
		this.lightCostValueLabel = new JLabel();
		this.earthCostLabel = new JLabel();
		this.earthCostValueLabel = new JLabel();

	}

	private void initBottomRightPanel() {
		this.bottomRightPanel.setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		// Global for all components
		c.insets = new Insets(5, 10, 10, 10);

		this.towerInfoLabel = new JLabel("Tower Information");
		this.towerInfoLabel.setFont(new Font("Tahoma", 0, 18)); // NOI18N
		c.fill = GridBagConstraints.RELATIVE;
		c.gridwidth = 2;
		c.gridx = 0;
		c.gridy = 0;
		this.bottomRightPanel.add(this.towerInfoLabel, c);

		this.towerLevelLabel = new JLabel("Level:");
		c.fill = GridBagConstraints.RELATIVE;
		// Set once
		c.gridwidth = 1;
		c.gridx = 0;
		c.gridy = 1;
		this.bottomRightPanel.add(this.towerLevelLabel, c);

		this.towerLevelValueLabel = new JLabel("levelValue");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 1;
		c.gridy = 1;
		this.bottomRightPanel.add(this.towerLevelValueLabel, c);

		this.towerDamageLabel = new JLabel("Damage:");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 0;
		c.gridy = 2;
		this.bottomRightPanel.add(this.towerDamageLabel, c);

		this.towerDamageValueLabel = new JLabel("damageValue");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 1;
		c.gridy = 2;
		this.bottomRightPanel.add(this.towerDamageValueLabel, c);

		this.towerSpeedLabel = new JLabel("Speed:");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 0;
		c.gridy = 3;
		this.bottomRightPanel.add(this.towerSpeedLabel, c);

		this.towerSpeedValueLabel = new JLabel("speedValue");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 1;
		c.gridy = 3;
		this.bottomRightPanel.add(this.towerSpeedValueLabel, c);

		this.towerUpgradeButton = new JButton("Upgrade");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridwidth = 2;
		c.gridx = 0;
		c.gridy = 4;
		this.bottomRightPanel.add(this.towerUpgradeButton, c);

		this.towerSellButton = new JButton("Sell");
		c.fill = GridBagConstraints.RELATIVE;
		c.gridx = 0;
		c.gridy = 5;
		this.bottomRightPanel.add(this.towerSellButton, c);
	}

	// Button, Label, and Panel declerations
	private JButton towerUpgradeButton;
	private JButton towerSellButton;
	private JLabel playerInfoLabel;
	private JLabel playerHealthValueLabel;
	private JLabel playerTimeValueLabel;
	private JLabel selectedEnemyLabel;
	private JLabel waveLevelLabel;
	private JLabel waveNameLabel;
	private JLabel waveHealthLabel;
	private JLabel waveArmorLabel;
	private JLabel waveSpeedLabel;
	private JLabel waveLevelValueLabel;
	private JLabel waveNameValueLabel;
	private JLabel playerScoreLabel;
	private JLabel waveHealthValueLabel;
	private JLabel waveArmorValueLabel;
	private JLabel waveSpeedValueLabel;
	private JLabel selectedHealthLabel;
	private JLabel selectedArmorLabel;
	private JLabel selectedSpeedLabel;
	private JLabel selectedHealthValueLabel;
	private JLabel selectedArmorValueLabel;
	private JLabel selectedSpeedValueLabel;
	private JLabel availableTowersLabel;
	private JLabel playerManaLabel;
	private JLabel fireCostLabel;
	private JLabel fireCostValueLabel;
	private JLabel waterCostLabel;
	private JLabel waterCostValueLabel;
	private JLabel waveInfoLabel;
	private JLabel airCostLabel;
	private JLabel airCostValueLabel;
	private JLabel lightCostLabel;
	private JLabel lightCostValueLabel;
	private JLabel earthCostLabel;
	private JLabel playerWaveLabel;
	private JLabel earthCostValueLabel;
	private JLabel towerInfoLabel;
	private JLabel towerLevelLabel;
	private JLabel towerDamageLabel;
	private JLabel towerSpeedLabel;
	private JLabel towerLevelValueLabel;
	private JLabel towerDamageValueLabel;
	private JLabel towerSpeedValueLabel;
	private JButton fireButton;
	private JButton waterButton;
	private JButton airButton;
	private JButton lightButton;
	private JButton earthButton;
	private JLabel playerHealthLabel;
	private JLabel playerTimeLabel;
	private JLabel playerScoreValueLabel;
	private JLabel playerManaValueLabel;
	private JLabel playerWaveValueLabel;
	private JPanel topLeftPanel;
	private JPanel topCenterPanel;
	private JPanel topRightPanel;
	private JPanel bottomLeftPanel;
	private JPanel bottomRightPanel;
	// End of declaration

	/*
	 * ImageIcon declerations
	 */
	// Fire
	private Image fireClicked;
	private Image fireUnclicked;
	private Image fireNotAvailable;
	private Image fireInsuffMana;
	// Water
	private Image waterClicked;
	private Image waterUnclicked;
	private Image waterNotAvailable;
	private Image waterInsuffMana;
	// Air
	private Image airClicked;
	private Image airUnclicked;
	private Image airNotAvailable;
	private Image airInsuffMana;
	// Light
	private Image lightClicked;
	private Image lightUnclicked;
	private Image lightNotAvailable;
	private Image lightInsuffMana;
	// Earth
	private Image earthClicked;
	private Image earthUnclicked;
	private Image earthNotAvailable;
	private Image earthInsuffMana;

	// End of declerations

	public static void main(String[] args) {
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				new ControlPanelNew(new Map(), new Player());
			}
		});
	}
}